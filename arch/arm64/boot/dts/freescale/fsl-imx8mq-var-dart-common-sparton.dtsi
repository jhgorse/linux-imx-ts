/*
 * Copyright 2019 Sparton
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

#include "dt-bindings/display/simple_panel_mipi_cmds.h"

#define DCS_Short_Write_NP(x)      DCS_S0P(x)
#define DCS_Long_Write_3P(x,y,z,a) DCS_L3P(x,y,z,a)
#define DCS_Short_Write_1P(x,y)    DCS_S1P(x,y)

/ {
	compatible = "variscite,imx8m-dart", "fsl,imx8mq";

	/delete-node/ leds;
	/delete-node/ gpio-keys;

	backlight: backlight {
		pwms = <&pwm2 0 1000000 0>;
		status = "okay";
	};

	gpio-keys {
		compatible = "gpio-keys";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_gpio_inputs>;

		GPIO220 {
			gpios = <&gpio2 20 GPIO_ACTIVE_LOW>;
			linux,code = <KEY_WAKEUP>;
		};

		GPIO101 {
			gpios = <&gpio1 1 GPIO_ACTIVE_LOW>;
			linux,code = <KEY_F1>;
		};

		GPIO301 {
			gpios = <&gpio3 1 GPIO_ACTIVE_LOW>;
			linux,code = <KEY_F2>;
		};

		GPIO303 {
			gpios = <&gpio3 3 GPIO_ACTIVE_LOW>;
			linux,code = <KEY_F3>;
		};

		GPIO306 {
			gpios = <&gpio3 6 GPIO_ACTIVE_LOW>;
			linux,code = <KEY_F4>;
		};

		GPIO307 {
			gpios = <&gpio3 7 GPIO_ACTIVE_LOW>;
			linux,code = <KEY_F5>;
		};



		GPIO316 {
			gpios = <&gpio3 16 GPIO_ACTIVE_LOW>;
			linux,code = <KEY_F7>;
		};
	};

	gpio-leds {
		compatible = "gpio-leds";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_gpio_outputs>;


		GPIO309 {
			gpios = <&gpio3 9 GPIO_ACTIVE_LOW>;
		};

		GPIO310 {
			gpios = <&gpio3 10 GPIO_ACTIVE_LOW>;
		};

		GPIO322 {
			gpios = <&gpio3 22 GPIO_ACTIVE_LOW>;
		};

		GPIO324 {
			gpios = <&gpio3 24 GPIO_ACTIVE_LOW>;
		};

	};


	reserved-memory {
		#address-cells = <2>;
		#size-cells = <2>;
		ranges;

//		m4_reserved_tcm: m4@7e0000 {
//			no-map;
//			reg = <0 0x7e0000 0 0x40000>;
//		};

		m4_reserved_data2: m4@0xBF000000 {
			no-map;
			reg = <0 0xBF000000 0 0x1000000>;
		};

	};


	mipi_cmds_nt35521z: mipi-cmds-nt35521z {
/*******************************************************************************
 * the following sequence has been extracted from UM-30165 datasheet
 * and slightly changed to use the defines available in
 * "dt-bindings/display/simple_panel_mipi_cmds.h"
 ******************************************************************************/
#if 1 // jhg
		mipi-cmds-init = /bits/ 8 <
			//========== Page 0 relative ==========
			DCS_Long_Write_3P(0xff,0x98,0x81,0x03)
			DCS_Short_Write_1P(0x01,0x00)
			DCS_Short_Write_1P(0x02,0x00)
			DCS_Short_Write_1P(0x03,0x72)
			DCS_Short_Write_1P(0x04,0x00)
			DCS_Short_Write_1P(0x05,0x00)
			DCS_Short_Write_1P(0x06,0x09)
			DCS_Short_Write_1P(0x07,0x00)
			DCS_Short_Write_1P(0x08,0x00)
			DCS_Short_Write_1P(0x09,0x01)
			DCS_Short_Write_1P(0x0a,0x00)
			DCS_Short_Write_1P(0x0b,0x00)
			DCS_Short_Write_1P(0x0c,0x01)
			DCS_Short_Write_1P(0x0d,0x00)
			DCS_Short_Write_1P(0x0e,0x00)
			DCS_Short_Write_1P(0x0f,0x00)
			DCS_Short_Write_1P(0x10,0x00)
			DCS_Short_Write_1P(0x11,0x00)
			DCS_Short_Write_1P(0x12,0x00)
			DCS_Short_Write_1P(0x13,0x00)
			DCS_Short_Write_1P(0x14,0x00)
			DCS_Short_Write_1P(0x15,0x00)
			DCS_Short_Write_1P(0x16,0x00)
			DCS_Short_Write_1P(0x17,0x00)
			DCS_Short_Write_1P(0x18,0x00)
			DCS_Short_Write_1P(0x19,0x00)
			DCS_Short_Write_1P(0x1a,0x00)
			DCS_Short_Write_1P(0x1b,0x00)
			DCS_Short_Write_1P(0x1c,0x00)
			DCS_Short_Write_1P(0x1d,0x00)
			DCS_Short_Write_1P(0x1e,0x40)
			DCS_Short_Write_1P(0x1f,0x80)
			DCS_Short_Write_1P(0x20,0x05)
			DCS_Short_Write_1P(0x21,0x02)
			DCS_Short_Write_1P(0x22,0x00)
			DCS_Short_Write_1P(0x23,0x00)
			DCS_Short_Write_1P(0x24,0x00)
			DCS_Short_Write_1P(0x25,0x00)

			DCS_Short_Write_1P(0x26,0x00)
			DCS_Short_Write_1P(0x27,0x00)
			DCS_Short_Write_1P(0x28,0x33)
			DCS_Short_Write_1P(0x29,0x02)
			DCS_Short_Write_1P(0x2a,0x00)
			DCS_Short_Write_1P(0x2b,0x00)
			DCS_Short_Write_1P(0x2c,0x00)
			DCS_Short_Write_1P(0x2d,0x00)
			DCS_Short_Write_1P(0x2e,0x00)
			DCS_Short_Write_1P(0x2f,0x00)

			DCS_Short_Write_1P(0x30,0x00)
			DCS_Short_Write_1P(0x31,0x00)
			DCS_Short_Write_1P(0x32,0x00)
			DCS_Short_Write_1P(0x33,0x00)
			DCS_Short_Write_1P(0x34,0x04)
			DCS_Short_Write_1P(0x35,0x00)
			DCS_Short_Write_1P(0x36,0x00)
			DCS_Short_Write_1P(0x37,0x00)
			DCS_Short_Write_1P(0x38,0x3c)
			DCS_Short_Write_1P(0x39,0x00)
			DCS_Short_Write_1P(0x3a,0x40)
			DCS_Short_Write_1P(0x3b,0x40)
			DCS_Short_Write_1P(0x3c,0x00)
			DCS_Short_Write_1P(0x3d,0x00)
			DCS_Short_Write_1P(0x3e,0x00)
			DCS_Short_Write_1P(0x3f,0x00)

			DCS_Short_Write_1P(0x40,0x00)
			DCS_Short_Write_1P(0x41,0x00)
			DCS_Short_Write_1P(0x42,0x00)
			DCS_Short_Write_1P(0x43,0x00)
			DCS_Short_Write_1P(0x44,0x00)

			DCS_Short_Write_1P(0x50,0x01)
			DCS_Short_Write_1P(0x51,0x23)
			DCS_Short_Write_1P(0x52,0x45)
			DCS_Short_Write_1P(0x53,0x67)
			DCS_Short_Write_1P(0x54,0x89)
			DCS_Short_Write_1P(0x55,0xab)
			DCS_Short_Write_1P(0x56,0x01)
			DCS_Short_Write_1P(0x57,0x23)
			DCS_Short_Write_1P(0x58,0x45)
			DCS_Short_Write_1P(0x59,0x67)
			DCS_Short_Write_1P(0x5a,0x89)
			DCS_Short_Write_1P(0x5b,0xab)
			DCS_Short_Write_1P(0x5c,0xcd)
			DCS_Short_Write_1P(0x5d,0xef)
			DCS_Short_Write_1P(0x5e,0x11)
			DCS_Short_Write_1P(0x5f,0x01)

			DCS_Short_Write_1P(0x60,0x00)
			DCS_Short_Write_1P(0x61,0x15)
			DCS_Short_Write_1P(0x62,0x14)
			DCS_Short_Write_1P(0x63,0x0e)
			DCS_Short_Write_1P(0x64,0x0f)
			DCS_Short_Write_1P(0x65,0x0c)
			DCS_Short_Write_1P(0x66,0x0d)
			DCS_Short_Write_1P(0x67,0x06)
			DCS_Short_Write_1P(0x68,0x02)
			DCS_Short_Write_1P(0x69,0x07)
			DCS_Short_Write_1P(0x6a,0x02)
			DCS_Short_Write_1P(0x6b,0x02)
			DCS_Short_Write_1P(0x6c,0x02)
			DCS_Short_Write_1P(0x6d,0x02)
			DCS_Short_Write_1P(0x6e,0x02)
			DCS_Short_Write_1P(0x6f,0x02)

			DCS_Short_Write_1P(0x70,0x02)
			DCS_Short_Write_1P(0x71,0x02)
			DCS_Short_Write_1P(0x72,0x02)
			DCS_Short_Write_1P(0x73,0x02)
			DCS_Short_Write_1P(0x74,0x02)
			DCS_Short_Write_1P(0x75,0x01)
			DCS_Short_Write_1P(0x76,0x00)
			DCS_Short_Write_1P(0x77,0x14)
			DCS_Short_Write_1P(0x78,0x15)
			DCS_Short_Write_1P(0x79,0x0e)
			DCS_Short_Write_1P(0x7a,0x0f)
			DCS_Short_Write_1P(0x7b,0x0c)
			DCS_Short_Write_1P(0x7c,0x0d)
			DCS_Short_Write_1P(0x7d,0x06)
			DCS_Short_Write_1P(0x7e,0x02)
			DCS_Short_Write_1P(0x7f,0x07)
			
			DCS_Short_Write_1P(0x80,0x02)
			DCS_Short_Write_1P(0x81,0x02)
			DCS_Short_Write_1P(0x82,0x02)
			DCS_Short_Write_1P(0x83,0x02)
			DCS_Short_Write_1P(0x84,0x02)

			DCS_Short_Write_1P(0x85,0x02)
			DCS_Short_Write_1P(0x86,0x02)
			DCS_Short_Write_1P(0x87,0x02)
			DCS_Short_Write_1P(0x88,0x02)
			DCS_Short_Write_1P(0x89,0x02)
			DCS_Short_Write_1P(0x8a,0x02)

			DCS_Long_Write_3P(0xff,0x98,0x81,0x04)
			DCS_Short_Write_1P(0x6c,0x15)
			DCS_Short_Write_1P(0x6e,0x2a)
			DCS_Short_Write_1P(0x6f,0x35)

			DCS_Short_Write_1P(0x3a,0x94)
			DCS_Short_Write_1P(0x8d,0x15)
			DCS_Short_Write_1P(0x87,0xba)
			DCS_Short_Write_1P(0x26,0x76)
			DCS_Short_Write_1P(0xb2,0xd1)
			DCS_Short_Write_1P(0xb5,0x06)

			DCS_Long_Write_3P(0xff,0x98,0x81,0x01)
			DCS_Short_Write_1P(0x22,0x0a)
			DCS_Short_Write_1P(0x31,0x00)
			DCS_Short_Write_1P(0x53,0xa5)
			DCS_Short_Write_1P(0x55,0xa5)
			DCS_Short_Write_1P(0x50,0x9a)
			DCS_Short_Write_1P(0x51,0x9a)
			DCS_Short_Write_1P(0x60,0x22)
			DCS_Short_Write_1P(0x61,0x00)
			DCS_Short_Write_1P(0x62,0x19)
			DCS_Short_Write_1P(0x63,0x10)

			DCS_Short_Write_1P(0xa0,0x08)
			DCS_Short_Write_1P(0xa1,0x18)
			DCS_Short_Write_1P(0xa2,0x1f)
			DCS_Short_Write_1P(0xa3,0x0f)
			DCS_Short_Write_1P(0xa4,0x14)
			DCS_Short_Write_1P(0xa5,0x24)
			DCS_Short_Write_1P(0xa6,0x1b)
			DCS_Short_Write_1P(0xa7,0x1b)
			DCS_Short_Write_1P(0xa8,0x5a)
			DCS_Short_Write_1P(0xa9,0x1c)
			DCS_Short_Write_1P(0xaa,0x29)
			DCS_Short_Write_1P(0xab,0x4e)
			DCS_Short_Write_1P(0xac,0x19)
			DCS_Short_Write_1P(0xad,0x16)
			DCS_Short_Write_1P(0xae,0x4c)
			DCS_Short_Write_1P(0xaf,0x21)

			DCS_Short_Write_1P(0xb0,0x2a)
			DCS_Short_Write_1P(0xb1,0x48)
			DCS_Short_Write_1P(0xb2,0x62)
			DCS_Short_Write_1P(0xb3,0x39)
			
			DCS_Short_Write_1P(0xc0,0x08)
			DCS_Short_Write_1P(0xc1,0x0d)
			DCS_Short_Write_1P(0xc2,0x18)
			DCS_Short_Write_1P(0xc3,0x10)
			DCS_Short_Write_1P(0xc4,0x0c)
			DCS_Short_Write_1P(0xc5,0x1d)
			DCS_Short_Write_1P(0xc6,0x10)
			DCS_Short_Write_1P(0xc7,0x16)
			DCS_Short_Write_1P(0xc8,0x61)
			DCS_Short_Write_1P(0xc9,0x1b)
			DCS_Short_Write_1P(0xca,0x27)
			DCS_Short_Write_1P(0xcb,0x5e)
			DCS_Short_Write_1P(0xcc,0x1c)
			DCS_Short_Write_1P(0xcd,0x1b)
			DCS_Short_Write_1P(0xce,0x4e)
			DCS_Short_Write_1P(0xcf,0x22)

			DCS_Short_Write_1P(0xd0,0x27)
			DCS_Short_Write_1P(0xd1,0x52)
			DCS_Short_Write_1P(0xd2,0x61)
			DCS_Short_Write_1P(0xd3,0x39)

			DCS_Long_Write_3P(0xff,0x98,0x81,0x00)
			DCS_Short_Write_1P(0x35,0x00)


		>;
#endif
		mipi-cmds-disable = /bits/ 8 <
			DCS_L5P(0xF0,0x55,0xAA,0x52,0x00,0x00)
			DCS_S1P(0x35,0x00)
		>;
		mipi-cmds-enable = /bits/ 8 <
#undef NT35521Z_SELF_TEST
#ifdef NT35521Z_SELF_TEST
			DCS_L5P(0xF0,0x55,0xAA,0x52,0x08,0x00)
			2 0xEF 0x01
			DCS_L4P(0xEE,0x87,0x78,0x02,0x40)
			// QS Reference:
			// DCS_Long_Write_5P (0xF0,0x55,0xAA,0x52,0x08,0x00);
			// DCS_Short_Write_1P(0xEF,0x01);
			// DCS_Long_Write_4P (0xEE,0x87,0x78,0x02,0x40);
#else /* NT35521Z_SELF_TEST */
			DCS_Short_Write_NP(0x11)
			DELAY (120)
			DCS_Short_Write_NP(0x29)
#endif /* NT35521Z_SELF_TEST */
		>;
	};
};

&ecspi1 {
	status = "disabled"; 	/* MOSI pin conflict with RTC irq */
};

&iomuxc {
	pinctrl-names = "default";

	imx8m-var-dart {
		pinctrl_bq25895: bq25895grp {
			fsl,pins = <
				MX8MQ_IOMUXC_SAI1_RXFS_GPIO4_IO0	0x19	/* charger enable */
				MX8MQ_IOMUXC_SAI1_RXC_GPIO4_IO1		0x19	/* charger interrupt */
			>;
		};

		pinctrl_gpio_inputs: gpioinputsgrp {
			fsl,pins = <
				MX8MQ_IOMUXC_SD2_WP_GPIO2_IO20		0x19	/* GPIO220 */
				MX8MQ_IOMUXC_GPIO1_IO01_GPIO1_IO1	0x19	/* GPIO101 */
				MX8MQ_IOMUXC_NAND_CE0_B_GPIO3_IO1	0x19	/* GPIO301 */
				MX8MQ_IOMUXC_NAND_CE2_B_GPIO3_IO3	0x19	/* GPIO303 */
				MX8MQ_IOMUXC_NAND_DATA00_GPIO3_IO6	0x19	/* GPIO306 */
				MX8MQ_IOMUXC_NAND_DATA01_GPIO3_IO7	0x19	/* GPIO307 */
				MX8MQ_IOMUXC_NAND_DATA02_GPIO3_IO8	0x19	/* GPIO308 */
				MX8MQ_IOMUXC_NAND_READY_B_GPIO3_IO16	0x19	/* GPIO316 */
			>;
		};

		pinctrl_gpio_outputs: gpiooutputsgrp {
			fsl,pins = <
				MX8MQ_IOMUXC_NAND_DATA03_GPIO3_IO9	0x19	/* GPIO309 */
				MX8MQ_IOMUXC_NAND_DATA04_GPIO3_IO10	0x19	/* GPIO310 */
				MX8MQ_IOMUXC_NAND_DQS_GPIO3_IO14	0x19	/* GPIO314 */
				MX8MQ_IOMUXC_NAND_RE_B_GPIO3_IO15	0x19	/* GPIO315 */
				MX8MQ_IOMUXC_SAI5_RXD1_GPIO3_IO22	0x19	/* GPIO322 */
				MX8MQ_IOMUXC_SAI5_RXD3_GPIO3_IO24	0x19	/* GPIO324 */
				MX8MQ_IOMUXC_SAI5_MCLK_GPIO3_IO25	0x19	/* GPIO325 */
				MX8MQ_IOMUXC_UART4_RXD_GPIO5_IO28	0x19	/* USB1_TRIGn */
				MX8MQ_IOMUXC_UART4_TXD_GPIO5_IO29	0x19	/* USB1_PWREN */
			>;
		};

		pinctrl_lcd: lcdgrp {
			fsl,pins = <
				MX8MQ_IOMUXC_GPIO1_IO13_GPIO1_IO13	0x19	/* display reset */
			>;
		};

		pinctrl_ltc3370: ltc3370grp {
			fsl,pins = <
				MX8MQ_IOMUXC_NAND_WE_B_GPIO3_IO17	0x19	/* PMIC_EN3 */
				MX8MQ_IOMUXC_NAND_WP_B_GPIO3_IO18	0x19	/* PMIC_EN2 */
				MX8MQ_IOMUXC_SAI5_RXFS_GPIO3_IO19	0x19	/* PMIC_EN4 */
				MX8MQ_IOMUXC_SAI5_RXC_GPIO3_IO20	0x19	/* PMIC_EN4 */
			>;
		};

		pinctrl_m41t62: m41t62grp {
			fsl,pins = <
				MX8MQ_IOMUXC_ECSPI1_MOSI_GPIO5_IO7	0x19	/* rtc interrupt */
			>;
		};

		pinctrl_maxtouch: maxtouchgrp {
			fsl,pins = <
				MX8MQ_IOMUXC_GPIO1_IO03_GPIO1_IO3	0x19	/* cap touch reset */
				MX8MQ_IOMUXC_GPIO1_IO10_GPIO1_IO10	0x19	/* cap touch interrupt */
			>;
		};

		pinctrl_pwm2: pwm2grp {
			fsl,pins = <
				MX8MQ_IOMUXC_SPDIF_RX_PWM2_OUT		0x06	/* pwm2 output */
			>;
		};
	};
};

&i2c2 {
	/delete-node/ rtc@0x68;		/* address conflict with m41t62 */

      	w1: ds2482@18 {
                compatible = "dallas,ds2482";
                reg = <0x18>;
		status = "okay";
        };

	maxtouch: maxtouch@4a {
		compatible = "atmel,maxtouch";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_maxtouch>;
		interrupt-parent = <&gpio1>;
		interrupts = <10 GPIO_ACTIVE_LOW>;
		reset-gpios = <&gpio1 3 GPIO_ACTIVE_LOW>;
		reg = <0x4a>;
		status = "okay";
	};

// Control with /dev/i2c as the driver doesn't support reg settings 
/*	vcnl4200_2: vcnl4200_2@51 {
		compatible = "vishay,vcnl4200";
		reg = <0x51>;
		status = "okay";
	};
*/
	m41t62: m41t62@68 {
		compatible = "st,m41t62";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_m41t62>;
		interrupt-parent = <&gpio5>;
		interrupts = <7 GPIO_ACTIVE_LOW>;
		reg = <0x68>;
		status = "okay";
	};
};

&i2c3 {
// Control with /dev/i2c as the driver doesn't support reg settings 
/*	vcnl4200_3: vcnl4200_3@51 {
		compatible = "vishay,vcnl4200";
		reg = <0x51>;
		status = "okay";
	};
*/
	bq25895: bq25895@6a {
		compatible = "ti,bq25890";
		pinctrl-names = "default";
		pinctrl-0 = <&pinctrl_bq25895>;
		interrupt-parent = <&gpio4>;
		interrupts = <1 GPIO_ACTIVE_LOW>;
		reg = <0x6a>;
		status = "okay";
		ti,battery-regulation-voltage = <4160000>;
		ti,charge-current = <3584000>;
		ti,termination-current = <64000>;
		ti,precharge-current = <128000>;
		ti,minimum-sys-voltage = <3000000>;
		ti,boost-voltage = <5000000>;
		ti,boost-max-current = <1000000>;
		ti,use-ilim-pin;
		ti,thermal-regulation-threshold = <120>;
	};

	max17055: battery-charger@36 {
		compatible = "maxim,max17055";
		reg = <0x36>;
		status = "okay";
		maxim,rsns-microohm = <10000>;

		// todo verify these values
		maxim,over-heat-temp = <600>;
		maxim,over-volt = <4300>;
	};
};

&i2c4 {
	status = "disabled";  /* Reserve for M4 */

	/delete-node/ ov5640_mipi2@0x3c;
};

&uart2 {
	status = "disabled";  /* Reserve for M4 */
};

&rpmsg{
	/*
	 * 64K for one rpmsg instance:
	 * --0x40000000~0x4000ffff: pingpong
	 */
	vdev-nums = <1>;
//djk	reg = <0x0 0x40000000 0x0 0x10000>;
	reg = <0x0 0xb8000000 0x0 0x10000>;
	status = "okay";
};

&pwm3 {
	status = "disabled";
};

&wdog3 {
	status = "disabled";
};

&hdmi {
	status = "disabled";
};

&dcss {
//	status = "disabled";
	status = "okay";
	disp-dev = "mipi_disp";

	clocks = <&clk IMX8MQ_CLK_DISP_APB_ROOT>,
		 <&clk IMX8MQ_CLK_DISP_AXI_ROOT>,
		 <&clk IMX8MQ_CLK_DISP_RTRM_ROOT>,
		 <&clk IMX8MQ_CLK_DC_PIXEL>,
		 <&clk IMX8MQ_CLK_DISP_DTRC>,
		 <&clk IMX8MQ_VIDEO_PLL1>,
		 <&clk IMX8MQ_CLK_27M>,
		 <&clk IMX8MQ_CLK_25M>;
	clock-names = "apb", "axi", "rtrm", "pix", "dtrc",
		      "pll", "pll_src1", "pll_src2";

	assigned-clocks = <&clk IMX8MQ_CLK_DC_PIXEL>,
			  <&clk IMX8MQ_CLK_DISP_AXI>,
			  <&clk IMX8MQ_CLK_DISP_RTRM>,
			  <&clk IMX8MQ_VIDEO_PLL1_REF_SEL>,
			  <&clk IMX8MQ_VIDEO_PLL1>;
	assigned-clock-parents = <&clk IMX8MQ_VIDEO_PLL1_OUT>,
				 <&clk IMX8MQ_SYS1_PLL_800M>,
				 <&clk IMX8MQ_SYS1_PLL_800M>,
				 <&clk IMX8MQ_CLK_27M>;
	assigned-clock-rates = <594000000>,
			       <800000000>,
			       <400000000>,
			       <0>,
			       <594000000>;

	dcss_disp0: port@0 {
		reg = <0>;

		dcss_disp0_mipi_dsi: mipi_dsi {
			remote-endpoint = <&mipi_dsi_in>;
		};
	};
};

&mipi_dsi_phy {
	status = "okay";

	// jhg: TODO test without these
	clock-names = "phy_ref";
	clocks = <&clk IMX8MQ_CLK_DSI_PHY_REF>;
};

&mipi_dsi {
	status = "okay";

	// jhg: TODO test without these
	assigned-clocks = <&clk IMX8MQ_CLK_DSI_PHY_REF>,
			  <&clk IMX8MQ_CLK_DSI_CORE>;
	assigned-clock-parents = <&clk IMX8MQ_VIDEO_PLL1_OUT>,
				 <&clk IMX8MQ_SYS1_PLL_266M>;
	assigned-clock-rates = <27000000>,
			       <266000000>;

	port@1 {
		mipi_dsi_in: endpoint {
			remote-endpoint = <&dcss_disp0_mipi_dsi>;
		};
	};

};

&mipi_dsi_bridge {
	status = "okay";

	panel@0 {
		compatible = "panel,simple";
		reg = <0>;
		pinctrl-0 = <&pinctrl_lcd>;
		reset-gpio = <&gpio1 13 GPIO_ACTIVE_LOW>;
		bus-format = "rgb888";
		dsi-format = "rgb888";
		dsi-lanes = <4>;
		delay-unprepare = <10>;
		delay-prepare = <150>;
		delay-enable = <150>;
		delay-disable = <150>;
		mipi-cmds = <&mipi_cmds_nt35521z>;
		/*bridge-de-active = <1>;*/
		/*bridge-sync-active = <1>;*/
		mode-clock-non-contiguous; // jhg: try continous clock mode
		/*mode-skip-eot;*/
		mode-video;
		/*mode-video-burst;*/ // jhg: non-burst with sync pulse
		/*mode-video-hse;*/
		mode-video-sync-pulse; // jhg: non-burst with sync pulse
		/*mode-video-hfp-disable;*/
		/*mode-video-hbp-disable;*/
		/*mode-video-hsa-disable;*/
		panel-width-mm = <62>;
		panel-height-mm = <110>;
		bridge-de-active = <0>;
		bridge-sync-active = <0>;
		bits-per-pixel = <24>;
		bits-per-color = <8>;

		display-timings {
			timing {
				clock-frequency = <75000000>;
				hactive = <720>;
				vactive = <1280>;
				hfront-porch = <85>;
				hback-porch = <75>;
				hsync-len = <10>;
				hsync-active = <0>;
				vfront-porch = <16>;
				vback-porch = <16>;
				vsync-len = <6>;
				vsync-active = <0>;
				de-active = <0>;
				pixelclk-active = <0>;
			};
		};

		port {
			panel1_in: endpoint {
				remote-endpoint = <&mipi_dsi_bridge_out>;
			};
		};
	};

	/* port@0 is the input to the bridge, and port@1 is the bridge output */

	port@1 {
		mipi_dsi_bridge_out: endpoint {
			remote-endpoint = <&panel1_in>;
		};
	};
};

&ov5640_mipi1 {
	status = "disabled"; 	/* reset pin conflict with USB1_TRIGn */
};

&pcie0 {
	status = "disabled"; 	/* not mounted */
};

&pwm2 {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_pwm2>;
	status = "okay";
};

&typec_ptn5150 {
	status = "disabled";	/* connect pin conflict with maxtouch irq */
};

&usb_dwc3_0 {
	extcon = <>;	/* no typec@3d */
	dr_mode = "host";
};

&mipi_csi_1 {
	status = "disabled";
};

&mipi_csi_2 {
	status = "disabled";
};

&csi1_bridge {
	status = "disabled";
};

&csi2_bridge {
	status = "disabled";
};

&sai3 {
	status = "disabled";
};

&usb3_1 {
	status = "disabled";
};

&usb_dwc3_1 {
	status = "disabled";
};

